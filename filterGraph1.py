# A script for my fork of
# glucometerUtils (https://github.com/pat-nel87/glucometerutils/tree/customFeatures)
# Designed to work with output generated by --text argument added to dump
# Cleans up Data in txt file and generates matplotlib graph
# tested with freestyle precisionNeo driver only 
#

import matplotlib
import matplotlib.pyplot as plt

from io import StringIO

from datetime import date, time, datetime


#globals
allReadings = []
dates = []
times = []
bloodSugar = []

def dateConvert(dates, times):

    myList = []

    for i in range(len(dates)):
        myDate = date.fromisoformat(str(dates[i]))
        myTime = time.fromisoformat(str(times[i]))
        myDatetime = datetime.combine(myDate, myTime)
        myList.append(myDatetime)

    return myList

def graphList(myList, bloodSugar):
    print("\n")
    graphFile = input("Please enter a file name for graph: ")
    graphFile = graphFile + ".png"
    x = matplotlib.dates.date2num(myList)
    y = bloodSugar
    fig = matplotlib.pyplot.figure()
    
    matplotlib.pyplot.plot_date(x, y, 'r', label="mg/dl")

    fig.savefig(graphFile)
    plt.show()
        
def graphQuery(filterList):
    print("\n")
    graphFile = input("Please enter a file name for graph: ")
    graphFile = graphFile + ".png"
    myDates = []
    mySugars = []
    for i in range(len(filterList)):
        myDates.append(filterList[i][0])
        mySugars.append(filterList[i][1])
    x = matplotlib.dates.date2num(myDates)
    y = mySugars
    values = [0,100,150,200,250,300,350,400]

    fig = matplotlib.pyplot.figure()
    #plt.xlim(0,300)
    matplotlib.pyplot.plot_date(x, y, 'r', label="mg/dl")
    plt.yticks(values, values) 
    #plt.xlim(0,300)
    
    fig.savefig(graphFile)
    plt.show()


def fileClean():

    file = input("Enter Filename: ")

    edit = open(file, "r")
    edit.seek(0,0)

    for line in edit:
        lin = edit.readline()
    
        try:
            reading = [lin[1]]

            for i in range(2,11):
                reading[0] = reading[0] + lin[i]
        
            dates.append(reading[0])
            reading.append(lin[12])

            for i in range(13,20):
                reading[1] = reading[1] + lin[i]
        
            times.append(reading[1])
            reading.append(lin[23])

            for i in range(24,28):
                reading[2] = reading[2] + lin[i]
        
            bloodSugar.append(reading[2])
        
            allReadings.append(reading)
    
        except IndexError:
            print("Processing Completed")
            break

def filterList(myList):
    
    # creates new list of lists with 2 indices
    # myList[n][0] datetime object
    # myList[n][1] blood glucose reading
    
    tempList = []
    
    for i in range(len(myList)):
        tempDate = date.fromisoformat(str(myList[i][0]))
        tempTime = time.fromisoformat(str(myList[i][1]))
        tempDateTime = datetime.combine(tempDate, tempTime)
        tempList.append([tempDateTime, myList[i][2]])
        #print(tempList[i])
    
    return tempList

def preciseFilter(filterList):
    # will filter by datetime
    queryList = []
    print("Please Select a Filtering Parameter", "\n",
                "1: Year", "\n", "2: Month", "\n", "3: Day", "\n")
    choice = input(":---> ")
    choice = int(choice)
    
    if choice == 1:
        
        myYear = input("Enter a year: ")
        
        for i in range(len(filterList)):
            if filterList[i][0].year == int(myYear):
            #    print(filterList[i])
                queryList.append(filterList[i])
    
    elif choice == 2:
        
        myMonth = input("Enter a month: ")
        myYear = input("Enter a year: ")

        for i in range(len(filterList)):
           if filterList[i][0].year == int(myYear): 
               if filterList[i][0].month == int(myMonth):
             #      print(filterList[i])
                   queryList.append(filterList[i]) 
    
    elif choice == 3:
        
        myYear = input("Enter Year: ")
        myMonth = input("Enter Month: ")
        myDay = input("Enter Day: ")
        
        for i in range(len(filterList)):
            if filterList[i][0].year == int(myYear):
                if filterList[i][0].month == int(myMonth):
                    if filterList[i][0].day == int(myDay):
              #          print(filterList[i])
                        queryList.append(filterList[i])

    return queryList

fileClean()
filtered = filterList(allReadings)
queryList = preciseFilter(filtered)
#print(queryList[0][0])
#print(queryList[0][1])
graphQuery(queryList)



    

